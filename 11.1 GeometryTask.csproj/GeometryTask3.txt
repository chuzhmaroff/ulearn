using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GeometryTasks
{
    public class Vector
    {
        public double X;
        public double Y;
        public double GetLength() => Geometry.GetLength(this);
        public Vector Add(Vector vector) => Geometry.Add(this , vector);
        public bool Belongs(Segment segment) => Geometry.IsVectorInSegment(this, segment);
    }


    public class Geometry
    {
        public static double GetLength(Vector vector) 
        {
            return Math.Sqrt(vector.X * vector.X + vector.Y * vector.Y);
        }

        public static Vector Add(Vector vector1, Vector vector2)
        {
            var result = new Vector
            {
                X = vector1.X + vector2.X,
                Y = vector1.Y + vector2.Y
            };
            return result;
        }

        public static double GetLength(Segment segment)
        {
            return Math.Sqrt((segment.End.X - segment.Begin.X) * (segment.End.X - segment.Begin.X) +
                (segment.End.Y - segment.Begin.Y) * (segment.End.Y - segment.Begin.Y));
        }

        public static bool IsVectorInSegment(Vector vector, Segment segment)
        {
            bool c = (vector.X >= segment.Begin.X && vector.Y >= segment.Begin.Y &&
            vector.X <= segment.End.X && vector.Y <= segment.End.Y);
            var a = (vector.X - segment.Begin.X) * (segment.End.Y - segment.Begin.Y);
            var b = (vector.Y - segment.Begin.Y) * (segment.End.X - segment.Begin.X);
            return c && (Math.Abs (a-b) < 1e-5);
        }
    }

    public class Segment
    {
        public Vector Begin;
        public Vector End;
        public double GetLength() => Geometry.GetLength(this);
        public bool Contains(Vector vector) => Geometry.IsVectorInSegment(vector, this);
    }
}
